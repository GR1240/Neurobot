import asyncio
from concurrent.futures import Executor
import config
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
# from aiogram.utils import executor
import logging
import random
import datetime
import requests
from keyboards import kb1, kb2
from random_cat import cat
from random_fox import fox
from weather import get_weather

#–í–∫–ª—é—á–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

#–°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=config.token)

#–î–∏—Å–ø–µ—á–µ—Ä
dp = Dispatcher()





#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    name = message.chat.first_name
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {name}', reply_markup=kb1)


#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /stop
@dp.message(Command('stop'))
async def cmd_stop(message: types.Message):
    name = message.chat.first_name
    await message.answer(f'–ü–æ–∫–∞, {name}')



#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cat
# @dp.message(Command('cat'))
# @dp.message(Command('–ö–æ—à–∫–∞'))
@dp.message(F.text.lower() == '–ø–æ–∫–∞–∂–∏ –∫–æ—à–∫—É')
async def cmd_cat(message: types.Message):
    name = message.chat.first_name
    img_cat = cat()
    await message.answer(f'–î–µ—Ä–∂–∏ –∫–æ—à–∫—É, {name}')
    await message.answer_photo(photo=img_cat)
# await bot.send_photo(message.from_user.id, photo=img_fox)


#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /fox
# @dp.message(Command('fox'))
# @dp.message(Command('–ª–∏—Å–∞'))
@dp.message(F.text.lower() == '–ø–æ–∫–∞–∂–∏ –ª–∏—Å—É')
async def cmd_fox(message: types.Message):
    name = message.chat.first_name
    img_fox = fox()
    await message.answer(f'–î–µ—Ä–∂–∏ –ª–∏—Å—É, {name}')
    await message.answer_photo(photo=img_fox)
# await bot.send_photo(message.from_user.id, photo=img_fox)


#–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /–ü–æ–≥–æ–¥–∞
@dp.message(Command('get_weather'))
@dp.message(Command('–ø–æ–≥–æ–¥–∞'))
@dp.message(F.text.lower() == '–ø–æ–≥–æ–¥–∞')

# @dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É")
# async def get_weather_command(message: types.Message):
#     # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ –µ–≥–æ
#     city = '–ú–æ—Å–∫–≤–∞'
#     weather = get_weather(city)
#     await message.reply(f"–ü–æ–≥–æ–¥–∞ –≤ {city}: {weather}¬∞C")

# if __name__ == '__main__':
#     Executor.start_polling(dp)


async def get_weather(message: types.Message):
    try:
        response = requests.get(f"http://api.openweathermap.org/data/2.5/weather?q=–º–æ—Å–∫–≤–∞&lang=ru&units=metric&appid=023a6a170c4ed97ffc94ab802fe5aa16")
        data = response.json()
        city = data["name"]
        cur_temp = data["main"]["temp"]
        humidity = data["main"]["humidity"]
        pressure = data["main"]["pressure"]
        wind = data["wind"]["speed"]

        sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
        sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])

        # –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è
        length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) -       datetime.datetime.fromtimestamp(data["sys"]["sunrise"])

    except:
        await message.reply("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!")


code_to_smile = {
     "Clear": "–Ø—Å–Ω–æ \U00002600",
     "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
     "Rain": "–î–æ–∂–¥—å \U00002614",
     "Drizzle": "–î–æ–∂–¥—å \U00002614",
     "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
     "Snow": "–°–Ω–µ–≥ \U0001F328",
     "Mist": "–¢—É–º–∞–Ω \U0001F32B"
}

#     # –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥—ã
# weather_description = date["weather"][0]["main"]

# if weather_description in code_to_smile:
#     wd = code_to_smile[weather_description]
# else:
#     # –µ—Å–ª–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≥–æ–¥—ã –Ω–µ—Ç, –≤—ã–≤–æ–¥–∏–º –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#     wd = "–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Ç–∞–º –∑–∞ –ø–æ–≥–æ–¥–∞..."
    


#–•–µ–Ω–¥–ª–µ—Ä –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message(F.text)
async def msg_echo(message: types.Message):
    msg_user = message.text.lower()
    name = message.chat.first_name
    if '–ø—Ä–∏–≤–µ—Ç' in msg_user:
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, {name}')
    elif '–ø–æ–∫–∞' == msg_user:
        await message.answer(f'–ü–æ–∫–∞-–ø–æ–∫–∞, {name}')
    elif '—Ç—ã –∫—Ç–æ' in msg_user:
        await message.answer_dice(emoji="üé≤")
    elif '–ª–∏—Å–∞' in msg_user:
        await message.answer(f'–°–º–æ—Ç—Ä–∏ —á—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å, {name}', reply_markup=kb2)
    else:
        await message.answer(f'–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞')

async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())